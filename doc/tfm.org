#+startup:fold
#
* ------------------------------------------------------------------------------
* TFM : the Trigger Farm Manager                                             
- forked from artdaq_daqinterface/fc/control/DAQInterface.py
- goals : 
  - reduce the number of transitions
  - reduce the transition times
  - encode run number in to filenames
  - get rid of symlinks in the logfile naming
  - make sure that the server can provide any diagnostics information needed for 
  - split configurations from the farm manager scripts themselves
  - provide troubleshooting of the farm performance
  - integrate with MIDAS as a frontend client
* ------------------------------------------------------------------------------
* farm_manager.py: server managing the trigger farm                          
** command line parameters                                                   
- example: 
#+begin_src
configuration=vst_001
partition=8
source tfm_configure $configuration $partition
$TFM_DIR/rc/control/farm_manager.py --config-dir=$PWD/config/$configuration
#+end_src
** Comments:                                                                 
   -- env['ARTDAQ_PARTITION_NUMBER'] is set by [[file:../bin/tfm_configure][tfm_configure]] and used by TFM

   -- the TFM port number = 10000+1000*partition_number, no need to improvise

   -- the configuration dir could be anywhere, and TFM should not be 
      making assumptions about it

   -- after sourcing the [[file:../bin/tfm_configure][tfm_configure]] script, only need to specify the configuration directory 
      (when debugging a given configuration, may want to create a copy)

|--------------------+---------------------------------+------+-------------+--------------------------------------------------------------------|
| flag               | description                     | Type | default     | comment                                                            |
|--------------------+---------------------------------+------+-------------+--------------------------------------------------------------------|
| -n, --name         | component name (what is that ?) | str  | "daqint"    |                                                                    |
| -H, --rpc-host     | This hostname/IP addr           | str  | "localhost" |                                                                    |
| -c, --control-host | Control host                    | str  | "localhost" |                                                                    |
|--------------------+---------------------------------+------+-------------+--------------------------------------------------------------------|
| -d, --debug-level  | debug level                     | int  | -1          | if specified, overrides settings in boot.txt                       |
|--------------------+---------------------------------+------+-------------+--------------------------------------------------------------------|
| -D, --config-dir   | config directory                | str  | None        | contains all configuration files, has to be defined                |
|                    |                                 |      |             | on the command line. Last config-dir path component (subdirectory) |
|                    |                                 |      |             | is the configuration name                                          |
|--------------------+---------------------------------+------+-------------+--------------------------------------------------------------------|
*** TFM knows about: BoardReader, EventBuilder, DataLogger, Dispatcher, RoutingManager
*** at startup, TFM goes directly into a 'booted' state
- 'config' and 'start' are merged into 'start'
- 'config' step defines new run number and configures the farm for that
- stop actually stops the processes
- stable states  : 'initialized', 'running', 'paused', 'stopped'
- commands: Init , Start, Pause, Resume, Stop, Shutdown
- transition commands sent by [[file:../bin/tfm_transition][tfm_transition]]
  - boot,
  - config
  - start :
    - if run number is not defined, use next one to the last found
    - if run number is defined, use that, send "starting struct/{run_number:i/$rn}"
  - enable
  - disable
  - stop
  - terminate
* configuration                                                              
** the TFM configuration is defined in a subdirectory 
         $TFM_FHICL_DIRECTORY/$config_name. 
The subdirectory should contain the following files :
*** [[file:settings.org][settings]] : defines the farm configuration - components (executables)     
    and additional configuration parameters               
*** .FCL files : one file per component                                      
 a component named 'x' has its FCL file named 'x.fcl'

the FCL files are copied from $TFM_FHICL_DIRECTORY/$config_name to a temp 
directory created in /tmp/`uuidgen` by TFM - see 
[[
file:../rc/control/farm_manager.py::/def check_hw_fcls/]]

see self.get_config_info() there 

- after being copied, the files are checked for being unique 
  not sure how one can make such a mistake

- also what are multiple subconfigurations ?
* TFM transitions                                                            
- defined in [[file:../bin/tfm_transition]]                                      
- commands are translated, and sent to the TF server are the translated commands. 
- "translated" commands are different from the original ones by "ing" 
- what is it? a linquistic exersize of defining gerunds ?
|-----------+--------------------+---------------+----------------------------------|
| command   | translated command | XMLRPC string | comment                          |
|-----------+--------------------+---------------+----------------------------------|
| boot      | booting            |               | obsolete, performed upon startup |
| config    | configuring        |               |                                  |
| start     | starting           |               |                                  |
| enable    | enabling           |               | obsolete                         |
| disable   | disabling          |               | obsolete                         |
| stop      | stopping           |               |                                  |
| shutdown  | shutting           |               | included into stop               |
| terminate | terminating        |               | obsolete                         |
|-----------+--------------------+---------------+----------------------------------|

1) TFM assumes that all config files , including FCLs are located in a directory 
provided to it at a startup , so the rest transitions do not really need a configuration
parameter
2) startup executed old boot
3) run number is specified at old config
4) new start doesn't execute old config - config should be a separate step , 
   as there are multiple subsystems, and at 'configured' all shoudl be ready to run
5) stop is stop, after stop - either configure or shutdown
6) at 'shutdown', the farm manager exits, requiring a new start
* [[file:test_examples.org][test examples]]                                                               
* [[file:environment_variables.org][environment variables]]                                                      
* farm management methods                                                    
  management methods ("direct", "pmt", "external_run_control") are defined in 
   [[file:../rc/control/farm_manager.py::/process_management_methods/]]
* [[file:xmlrpc.org][XMLRPC]]                                                                     
* [[file:./communication_with_artdaq.org][communication with artdaq]]
* log file naming                                                            
  [[file:../rc/control/farm_manager.py::/def determine_logfilename/]]

  log file names defined during the boot transition 
  -- do_boot
     -- get_artdaq_log_filenames
        -- determine_logfilename

  -- logfiles are created at boot step, on my laptop/docker this step for config='demo'
     took from 00:07:53 to 00:09:03, out of that:
  -- 38 sec - not sure what
  -- 10 sec - check of the setup script
  -- 19 sec - launch of the artdaq processes
  --  2 sec - associating log files

  self.launch_attempt_files[p.host] : PMT log file (used in manage_processes_direct.py
  
- all art processes have their COUT redirected to the PMT log file

- however, messages by message_facility go into individual log files, one per 
art process
* TFM command line scripts                                                   
** [[file:../bin/tfm_configure][tfm_configure]] : setup active artdaq configuration
** tfm_transition                                                            
- handles transitions: config, start, stop, 
- doesn't handle yet: pause, resume, shutdown
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_transition stop
[tfm_transition:7] : parameters:stop
[tfm_transition:96] full_cmd=xmlrpc http://localhost:18000/RPC2 state_change daqint stopping 'struct/{ignored_variable:i/999}'
Result:

Nil
#+end_src
** artdaq_process_info.sh                                                    
- call signature:
#+begin_src
      artdaq_process_info.sh [partition]
#+end_src
- if partition is specified, it is used to determine the communication port number 
- otherwise, the value of $TFM_PARTITION is used

** tfm_status (obsolete)                                                     
- returns old state w/o completion                            
#+begin_src

#+end_src 
** [[file:../bin/tfm_get_status][tfm_get_status]]                                                            
- returns status of the farm (with completion percentage for transisitons)
- stable states always report completion at 100%, i.e. 'running:100'
- perhaps, rewrite in python to parse
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_get_status
'configured:100'
#+end_src
** [[file:../bin/tfm_start][tfm_start]] : start the farm manager, the script needs more debugging
** [[file:../bin/tfm_shutdown][tfm_shutdown]] : stops all processes, shuts down the farm, stops the TFM    
* interaction with the Postgres DB                                           
- if /Experiment/RunConfigurations/$config_name/UseDBRunInfo is set to "yes" 
  the [[file:../../frontends/tfm_frontend/tfm_frontend.cc][tfm_frontend]] requests the next run number from Posstgres DB and stores 
  there the RUN_CONFIGURATION and RUN_TRANSITION records

- MIDAS, via MSL, executes script [[file:../../frontends/tfm_frontend/get_next_run_number.sh]] 
  which returns the next run number to /Sequencer/Variables/SCRIPT_RESULT 

- Note: get_next_run_number.sh should be accessible to MIDAS. Currently - it is in the work dir, 
  which is not the best, store it in bin?

- here is the MSL script
#+begin_src
# -*- mode:text -*-
#------------------------------------------------------------------------------------
# last step before starting a run
# get next run number from the run info DB. 
# the shell script is supposed to register the next run and print its number (and only the run number) 
# then it propagates to MIDAS
# need to protect things so the new run could not be started w/o registering,
# for example, the end_run would write into the ODB some flag, w/o which one couldn't start the run 
#------------------------------------------------------------------------------------

script ./get_next_run_number.sh

#------------------------------------------------------------------------------------
# MIDAS increments the run number, so subtract one from it....
#------------------------------------------------------------------------------------

odbset /Runinfo/Run number, $SCRIPT_RESULT-1
#+end_src

- [[file:../../frontends/tfm_frontend/get_next_run_number.cc]] gets compiled into 
  the executable interacting with the DB (via a clone of Antonio's code - 
  see [[file:../../frontends/tfm_frontend/db_runinfo.hh]]

- comment: this is the first iteration, the code should be cleaned up

* [[file:./dqm.org][DQM]]
* error codes                                                                
- 140: 
* ------------------------------------------------------------------------------
* [[file:work_in_progress.org][work_in_progress and TODO items]]
* ------------------------------------------------------------------------------
* attic                                                                      
** [[file:artdaq_daqinterface.org]]
* ------------------------------------------------------------------------------
