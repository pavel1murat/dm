#+startup:fold
#
* TFM : the Trigger Farm Manager                                             
- forked from artdaq_daqinterface/fc/control/DAQInterface.py
- goals : 
  - reduce number of transitions
  - get rid of symlinks in the logfile naming
  - make sure that the server can provide any diagnostics information needed for 
  - split configurations from teh farm managr scripts themselves
    troubleshooting the farm performance
  - integrate with MIDAS as a frontend client
* [[file:artdaq_daqinterface.org]]
* ------------------------------------------------------------------------------
* [[file:software_setup.org][software setup]]
* TODO [0/1]  farm_manager.py: server managing the trigger farm                          
** command line parameters                                                   
|------------------------+---------------------------------+------+-------------+---------------------|
| flag                   | description                     | Type | default     | comment             |
|------------------------+---------------------------------+------+-------------+---------------------|
| -n, --name             | component name (what is that ?) | str  | "daqint"    |                     |
| -p, --partition-number | partition number                | int  | 888         |                     |
| -r, --rpc-port         | RPC port                        | int  | 5570        |                     |
| -H, --rpc-host         | This hostname/IP addr           | str  | "localhost" |                     |
| -c, --control-host     | Control host                    | str  | "localhost" |                     |
|------------------------+---------------------------------+------+-------------+---------------------|
| -d, --debug-level      | debug level                     | int  | 0           | can also be defined |
|                        |                                 |      |             | in boot.txt         |
|------------------------+---------------------------------+------+-------------+---------------------|
| -D, --config-dir       | config directory                | str  | None        |                     |
|------------------------+---------------------------------+------+-------------+---------------------|
- config-dir contains all configuration files, has to be defined on the 
  command line
  last config-dir path component (subdirectory) is the configuration name
- knows about: BoardReader, EventBuilder, DataLogger, Dispatcher, RoutingManager
- at startup goes directly into a 'booted' state
- 'config' step defines new run number and configures the farm for that
- start 
- stop actually stops the procecesses, so new 'configure' is needed
- however, the TFM is in 'ready' state, so cant run 'congig' transition
- shutdown transitions the farm from 'ready' to 'booted' state
- not clear, what it actually is doing
- but after 'shutdown' can do next 'config'
- need to figure the difference between the 'terminate' and 'shutdown'
- states  : Ready, Running, Paused, Stopped
- commands: Init , Start, Pause, Resume, Stop, Shutdown
- transition commands sent by [[file:../bin/send_transition.sh]]
  - boot,
  - config
  - start :
    - if run number is not defined, use next one to the last found
    - if run number is defined, use that, send "starting struct/{run_number:i/$rn}"
  - enable
  - disable
  - stop
  - terminate
** TODO [0/1] internal variables and their quirks                            
*** TODO debug_level: when set to zero,  the environment gets corrupted      
    for the moment, set to 1, and work around
* configuration                                                              
- the farm configuration consists of the following files:
** boot.txt : defines components the farm configuration
** settings : defined additional farm configuration parameters               
- to be merged with boot.txt
** source_me: defined extra env vars for the configuration
** .FCL files : one file per component                                       
- component 'x' has its FCL file named 'x.fcl'
* TFM transitions                                                            
- defined in [[file:../bin/tfm_transition]]                                      
- commands are translated, and sent to the TF server are the translated commands. 
- "translated" commands are different from the original ones by "ing" 
- what is it? a linquistic exersize of defining gerunds ?
|-----------+--------------------+---------------+----------------------------------|
| command   | translated command | XMLRPC string | comment                          |
|-----------+--------------------+---------------+----------------------------------|
| boot      | booting            |               | obsolete, performed upon startup |
| config    | configuring        |               |                                  |
| start     | starting           |               |                                  |
| enable    | enabling           |               | obsolete                         |
| disable   | disabling          |               | obsolete                         |
| stop      | stopping           |               |                                  |
| shutdown  | shutting           |               | included into stop               |
| terminate | terminating        |               | obsolete                         |
|-----------+--------------------+---------------+----------------------------------|

1) TFM assumes that all config files , including FCLs are located in a directory 
provided to it at a startup , so the rest transitions do not really need a configuration
parameter
2) startup executed old boot
3) run number is specified at old config
4) new start doesn't execute old config - config should be a separate step , 
   as there are multiple subsystems, and at 'configured' all shoudl be ready to run
5) stop is stop, after stop - either configure or shutdown
6) at 'shutdown', the farm manager exits, requiring a new start
* [[file:test_examples.org][test examples]]                                                               
* [[file:environment_variables.org][environment variables]]                                                      
* farm management methods                                                    
  management methods ("direct", "pmt", "external_run_control") are defined in 
   [[file:../rc/control/farm_manager.py::/process_management_methods/]]
* xmlrpc                                                                     
** checkout code                                                             
svn checkout http://svn.code.sf.net/p/xmlrpc-c/code/stable xmlrpc-c

** https://www.xml.com/pub/a/2001/10/29/xmlrpc.html - the most useful link   
- snippet which creates a struct 
- array uses round brackets
#+begin_src
result = xmlrpc_client_call( &env,
                             url,
                             "some_func",
                             "({s:i,s:i})",
                             "my great argument", 1,
                             "my next argument",  2
                           )
#+end_src
** https://xmlrpc-c.sourceforge.io/doc/xmlrpc.html
** http://xmlrpc.com/         
** RPC2 manual: http://www.coda.cs.cmu.edu/doc/html/rpc2_manual.html
** code examples: https://xmlrpc-c.sourceforge.io/example-code.php
** status                                                                    
#+begin_src                                                                   
                xmlrpc http://localhost:$TFM_PORT/RPC2 state daqint
#+end_src 
** TODO listdaqcomps                                                         
for some reason, listdaqcomps output doesn't show up on the screen immediately, 
but it shows up when the next command is executed - a TODO item
#+begin_src                                                                  
xmlrpc http://localhost:$TFM_PORT/RPC2 listdaqcomps
#+end_src
** listconfigs                                                               
- lists available farm configurations defined in subdirectories of the $TFM_FHICL_DIRECTORY
- output saved in /tmp/listconfigs_mu2etrk.txt 
#+begin_src                                                                  
mu2etrk@mu2edaq09:~/test_stand/pasha_019>xmlrpc http://localhost:$TFM_PORT/RPC2 listconfigs
Available configurations: 
ascii_simulator_example
circular_buffer_mode_example
circular_buffer_mode_withRM
complex_subsystems
complicated_subsystems
config_includes
demo
demo_largesystem
dune_sample_system
eventbuilder_diskwriting
file_closing_example
mediumsystem_with_routing_manager
missed_requests
mu2e_sample_system
multiple_art_processes_example
multiple_dataloggers
multiple_fragment_ids
multiple_fragments_per_read
pdune_swtrig_DFO
protodune_mock_system
request_based_dataflow_example
routing_manager_example
simple_subsystems
subconfigs
subrun_example
See file "/tmp/listconfigs_mu2etrk.txt" for saved record of the above configurations

Please note that for the time being, the optional
max_configurations_to_list variable which may be set in
/home/mu2etrk/test_stand/pasha_019/tfm_test/settings is only applicable
when working with the database
Result:

Nil
#+end_src 
* log file naming                                                            
  [[file:../rc/control/farm_manager.py::/def determine_logfilename/]]

  log file names defined during the boot transition 
  -- do_boot
     -- get_artdaq_log_filenames
        -- determine_logfilename

  -- logfiles are created at boot step, on my laptop/docker this step for config='demo'
     took from 00:07:53 to 00:09:03, out of that:
  -- 38 sec - not sure what
  -- 10 sec - check of the setup script
  -- 19 sec - launch of the artdaq processes
  --  2 sec - associating log files

  self.launch_attempt_files[p.host] : PMT log file (used in manage_processes_direct.py
  
- all art processes have their COUT redirected to the PMT log file

- however, messages by message_facility go into individual log files, one per 
art process
* TFM scripts                                                                
** tfm_transition                                                            
- handles transitions: config, start, stop, 
- doesn't handle yet: pause, resume, shutdown
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_transition stop
[tfm_transition:7] : parameters:stop
[tfm_transition:96] full_cmd=xmlrpc http://localhost:18000/RPC2 state_change daqint stopping 'struct/{ignored_variable:i/999}'
Result:

Nil
#+end_src
** artdaq_process_info.sh                                                    
- call signature:
#+begin_src
      artdaq_process_info.sh [partition]
#+end_src
- if partition is specified, it is used to determine the communication port number 
- otherwise, the value of $TFM_PARTITION is used

** tfm_status (obsolete)                                                     
- returns old state w/o completion                            
#+begin_src

#+end_src 
** tfm_get_status                                                            
- returns status with completion percentage for transisitons
#+begin_src
mu2etrk@mu2edaq09:~/test_stand/pasha_020>tfm_get_status
xmlrpc http://localhost:18000/RPC2 get_state daqint
Result:

String: 'configured:100'
#+end_src
** listconfigs.sh (obsolete)                                                 
- don't think it is needed, no real use....
#+begin_src                                                                  
/projects/mu2e/tdaq/pasha_013/DAQInterface>listconfigs.sh
Result:

Nil
/projects/mu2e/tdaq/pasha_013/DAQInterface>[config_functions_local.py] components_file: /projects/mu2e/tdaq/pasha_013/DAQInterface/known_boardreaders_list
EMOE # of components found in listdaqcomps call: 31
component01 (runs on localhost)
component02 (runs on localhost)
component03 (runs on localhost)
component04 (runs on localhost)
component05 (runs on localhost)
component06 (runs on localhost)
component07 (runs on localhost)
component08 (runs on localhost)
component09 (runs on localhost)
component10 (runs on localhost)
component1000 (runs on localhost)
component1001 (runs on localhost)
component11 (runs on localhost)
component12 (runs on localhost)
component13 (runs on localhost)
component14 (runs on localhost)
component15 (runs on localhost)
component16 (runs on localhost)
component17 (runs on localhost)
component18 (runs on localhost)
component19 (runs on localhost)
component_buffer_mode (runs on localhost)
component_dies_from_abort (runs on localhost)
component_dies_from_exit (runs on localhost)
component_dies_on_config (runs on localhost)
component_fragment_size_blows_up (runs on localhost)
component_hangs (runs on localhost)
component_one_event_per_subrun (runs on localhost)
component_subsystem_2 (runs on localhost)
component_throws_exception (runs on localhost)
component_throws_exception_on_config (runs on localhost)
murat     128584  2.3  0.2 3299960 34292 pts/2   Sl   00:09   0:29 eventbuilder -c id: 10103 commanderPluginType: xmlrpc rank: 3 application_name: EventBuilder2 partition_number: 0
murat     137942  0.0  0.0 2835944 10016 pts/2   S    00:14   0:00 eventbuilder -c id: 10103 commanderPluginType: xmlrpc rank: 3 application_name: EventBuilder2 partition_number: 0
Appear to have duplicate processes for EventBuilder2 on 2451a76a3e84, pids: 128584 137942
murat     128583  2.3  0.2 3295724 33788 pts/2   Sl   00:09   0:29 eventbuilder -c id: 10102 commanderPluginType: xmlrpc rank: 2 application_name: EventBuilder1 partition_number: 0
murat     137943  0.0  0.0 2835944 9996 pts/2    S    00:14   0:00 eventbuilder -c id: 10102 commanderPluginType: xmlrpc rank: 2 application_name: EventBuilder1 partition_number: 0
Appear to have duplicate processes for EventBuilder1 on 2451a76a3e84, pids: 128583 137943
murat     128585  3.8  0.1 3027128 27952 pts/2   Sl   00:09   0:49 datalogger -c id: 10104 commanderPluginType: xmlrpc rank: 4 application_name: DataLogger1 partition_number: 0
murat     137923  0.0  0.0 2723632 10512 pts/2   S    00:14   0:00 datalogger -c id: 10104 commanderPluginType: xmlrpc rank: 4 application_name: DataLogger1 partition_number: 0
Appear to have duplicate processes for DataLogger1 on 2451a76a3e84, pids: 128585 137923
murat     169563  1.0  0.2 3295724 33476 pts/2   Sl   06:51   0:11 eventbuilder -c id: 10102 commanderPluginType: xmlrpc rank: 2 application_name: EventBuilder1 partition_number: 0
murat     184287  0.0  0.0 2835944 9996 pts/2    S    07:04   0:00 eventbuilder -c id: 10102 commanderPluginType: xmlrpc rank: 2 application_name: EventBuilder1 partition_number: 0
Appear to have duplicate processes for EventBuilder1 on 2451a76a3e84, pids: 169563 184287
murat     169564  1.0  0.2 3299960 33652 pts/2   Sl   06:51   0:11 eventbuilder -c id: 10103 commanderPluginType: xmlrpc rank: 3 application_name: EventBuilder2 partition_number: 0
murat     184286  0.0  0.0 2840048 10420 pts/2   S    07:04   0:00 eventbuilder -c id: 10103 commanderPluginType: xmlrpc rank: 3 application_name: EventBuilder2 partition_number: 0
Appear to have duplicate processes for EventBuilder2 on 2451a76a3e84, pids: 169564 184286
murat     169565  1.7  0.1 3027128 28124 pts/2   Sl   06:51   0:19 datalogger -c id: 10104 commanderPluginType: xmlrpc rank: 4 application_name: DataLogger1 partition_number: 0
murat     184267  0.0  0.0 2723632 10504 pts/2   S    07:04   0:00 datalogger -c id: 10104 commanderPluginType: xmlrpc rank: 4 application_name: DataLogger1 partition_number: 0
Appear to have duplicate processes for DataLogger1 on 2451a76a3e84, pids: 169565 184267
Available configurations: 
ascii_simulator_example
circular_buffer_mode_example
circular_buffer_mode_withRM
complex_subsystems
complicated_subsystems
config_includes
demo
demo_largesystem
dune_sample_system
eventbuilder_diskwriting
file_closing_example
mediumsystem_with_routing_manager
missed_requests
mu2e_sample_system
multiple_art_processes_example
multiple_dataloggers
multiple_fragment_ids
multiple_fragments_per_read
pdune_swtrig_DFO
protodune_mock_system
request_based_dataflow_example
routing_manager_example
simple_subsystems
subconfigs
subrun_example
See file "/tmp/listconfigs_murat.txt" for saved record of the above configurations

Please note that for the time being, the optional
max_configurations_to_list variable which may be set in
/projects/mu2e/tdaq/pasha_013/DAQInterface/daqinterface_settings is only
applicable when working with the database
#+end_src
* error codes                                                                
- 140: 
* ------------------------------------------------------------------------------
* [[file:work_in_progress.org][work_in_progress]]
* ------------------------------------------------------------------------------
