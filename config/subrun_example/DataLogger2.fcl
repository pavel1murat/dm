#include "standard_metrics_configs.fcl"
#include "data_logging_parameters.fcl"
#include "routing_manager_parameters.fcl"
#include "art_input_output_parameters.fcl"

daq: {
  aggregator: {
    expected_events_per_bunch: 1
    event_queue_depth: 40
    event_queue_wait_time: 5
    buffer_count: 40
    onmon_event_prescale: 1
    is_data_logger: true

    auto_suppression_enabled: false

    routing_token_config: @local::artdaq_DL_routing_token_specification

    sources: { }
  }

  metrics: @local::DL_metrics_default
}

services: {
  ArtdaqSharedMemoryServiceInterface: @local::art_service_for_shared_memory
  ArtdaqFragmentNamingServiceInterface: @local::art_service_for_fragment_naming
}

source: @local::artdaq_DL_art_source_specification

outputs: {
  @table::artdaq_DL_data_logging_specification

  rootNetOutput: @local::artdaq_DL_art_output_module_for_sending_events
  #rootNetOutput.SelectEvents: { SelectEvents: [ pmod2,pmod3 ] }
}

physics: {
  analyzers: {
   checkintegrity: {
     module_type: CheckIntegrity
     raw_data_label: daq
     frag_type: TOY1
   }
   checkintegrity2: {
     module_type: CheckIntegrity
     raw_data_label: daq
     frag_type: TOY2
   }
  }

  producers: {
     BuildInfo: {
       module_type: ArtdaqDemoBuildInfo
       instance_name: ArtdaqDemo
     }
   }

  p2: [ BuildInfo ]
  a1: [ checkintegrity, checkintegrity2 ]
  send_data_to_dispatcher: [rootNetOutput]

  @table::artdaq_DL_data_logging_path
}

process_name: DAQDL
