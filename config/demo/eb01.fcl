# -*- mode:tcl -*- 
daq: {
    event_builder: {
        buffer_count                 : 200
        verbose                      : true
        
        expected_fragments_per_event          : 10
        use_art                               : true
        print_event_store_stats               : true
        verbose                               : true
        events_expected_in_SimpleQueueReader  : 5
        end_of_data_wait_s                    : 600
        art_analyzer_count                    : 1
        expected_art_event_processing_time_us : 30000000
        # max_fragment_size_bytes               : 100000         ## 0x100000
        broadcast_buffer_size                 : 100000         ## 0x6400000
        art_index_offset                      : 4

        routing_token_config: {
            use_routing_manager: false
        }

        sources: { }
    }
    metrics: {
        evbFile: {
            metricPluginType: "file"
            level: 4
            fileName: "eventbuilder/evb_%UID%_metrics.log"
            absolute_file_path: false
            uniquify: true
        }
    }
} 

art: {
    services: {
        ArtdaqSharedMemoryServiceInterface: {
            service_provider: ArtdaqSharedMemoryService
        }
        ArtdaqFragmentNamingServiceInterface: { service_provider: ArtdaqFragmentNamingService helper_plugin: "ArtdaqDemo" }
    }

    outputs: {
        rootNetOutput: {
            module_type: RootNetOutput
            #SelectEvents: { SelectEvents: [ pmod2,pmod3 ] }
            #broadcast_sends: true
            destinations: {	}
            
            routing_table_config: {
                use_routing_manager: false
            }
        }
        #normalOutput: {
        #  module_type: RootDAQOut
        #  fileName: "/tmp/artdaqdemo_eb00_r%06r_sr%02s_%to_%#.root"
        #  #SelectEvents: { SelectEvents: [ pmod2,pmod3 ] }
        #  fileProperties: { maxSubRuns: 1 maxRuns: 1  }
        #  compressionLevel: 501 # ZSTD
        #  fastCloning: false
        #}
    }

    physics: {
        analyzers: {
            #         toy1Integ: {
            #             module_type: CheckIntegrity
            #             raw_data_label: "daq"
            #             frag_type: "TOY1"      
            #         }
            #         toy2Integ: {
            #             module_type: CheckIntegrity
            #             raw_data_label: "daq"
            #             frag_type: "TOY2"
            #         }
        }
        
        producers: {
        }
        
        filters: {
            #         prescaleMod2: {
            #             module_type: NthEvent
            #             nth: 2
            #         }
            #         
            #         prescaleMod3: {
            #             module_type: NthEvent
            #             nth: 3
            #         }
        }

        #    pmod2: [ prescaleMod2 ]
        #    pmod3: [ prescaleMod3 ]
        
        a1: [ ]                                    ## toy1Integ, toy2Integ ]
        #my_output_modules: [ normalOutput ]

        e1: [ rootNetOutput ]
        end_paths : [ e1 ]
    }

    source: {
        module_type: ArtdaqInput
        waiting_time: 2500000
        resume_after_timeout: true
    }

    process_name: EB01
}
